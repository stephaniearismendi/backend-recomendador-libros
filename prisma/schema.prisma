generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int              @id @default(autoincrement())
  username  String           @unique
  email     String           @unique
  password  String
  name      String?
  bio       String?
  avatar    String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  favorites Favorite[]
  sessions  ReadingSession[]
  posts     Post[]
  postComments PostComment[]
  likes     Like[]
  chapterComments ChapterComment[]
  stories   Story[]

  following Follow[] @relation("UserFollows")
  followers Follow[] @relation("UserFollowedBy")
  
  achievements     UserAchievement[]
  stats           UserStats?
  readingChallenges ReadingChallenge[]
}

model Book {
  id          String           @id
  title       String
  author      String
  imageUrl    String?
  description String?
  rating      String?
  category    String?
  favorites   Favorite[]
  sessions    ReadingSession[]
  posts       Post[]
}

model Favorite {
  user   User   @relation(fields: [userId], references: [id])
  userId Int
  book   Book   @relation(fields: [bookId], references: [id])
  bookId String

  @@id([userId, bookId])
}


model ReadingSession {
  id          Int       @id @default(autoincrement())
  progress    Int       @default(0)
  duration    Int       @default(0)
  currentPage Int?
  totalPages  Int?
  isActive    Boolean   @default(true)
  startedAt   DateTime  @default(now())
  endedAt     DateTime?
  lastReadAt  DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  book        Book      @relation(fields: [bookId], references: [id])
  bookId      String

  @@index([userId, bookId, isActive])
  @@index([userId, isActive])
  @@index([userId, lastReadAt])
  @@index([bookId])
}

model Post {
  id         String    @id @default(cuid())
  userId     Int
  text       String?
  bookId     String?
  createdAt  DateTime  @default(now())
  user       User      @relation(fields: [userId], references: [id])
  book       Book?     @relation(fields: [bookId], references: [id])
  likes      Like[]
  comments   PostComment[]
}

model PostComment {
  id         String   @id @default(cuid())
  postId     String
  userId     Int
  text       String
  bookTitle  String?
  bookAuthor String?
  bookCover  String?
  createdAt  DateTime @default(now())
  post       Post     @relation(fields: [postId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model Like {
  userId    Int
  postId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, postId])
}

model Club {
  id        String        @id @default(cuid())
  name      String
  cover     String?
  createdAt DateTime      @default(now())
  members   ClubMember[]  @relation("ClubMembers")
  chapters  ClubChapter[] @relation("ClubChapters")
}

model ClubMember {
  userId   Int
  clubId   String
  joinedAt DateTime @default(now())
  club     Club     @relation("ClubMembers", fields: [clubId], references: [id])

  @@id([userId, clubId])
}

model ClubChapter {
  id        String        @id @default(cuid())
  clubId    String
  chapter   Int
  title     String?
  createdAt DateTime      @default(now())
  club      Club          @relation("ClubChapters", fields: [clubId], references: [id])
  comments  ChapterComment[]

  @@unique([clubId, chapter])
  @@index([clubId, chapter])
}

model ChapterComment {
  id         String   @id @default(cuid())
  chapterId  String
  userId     Int
  text       String
  createdAt  DateTime @default(now())

  chapter ClubChapter @relation(fields: [chapterId], references: [id])
  user    User        @relation(fields: [userId], references: [id])

  @@index([chapterId, createdAt])
}

model Follow {
  followerId  Int
  followingId Int
  createdAt   DateTime @default(now())

  follower  User @relation("UserFollows", fields: [followerId], references: [id])
  following User @relation("UserFollowedBy", fields: [followingId], references: [id])

  @@id([followerId, followingId])
}

model Story {
  id        String   @id @default(cuid())
  userId    Int
  content   String   
  bookTitle String?  
  bookCover String?  
  createdAt DateTime @default(now())
  expiresAt DateTime 
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
  @@index([expiresAt])
}

model Achievement {
  id          String   @id @default(cuid())
  type        String   @unique 
  title       String
  description String
  icon        String
  rarity      String
  points      Int
  condition   Json 
  createdAt   DateTime @default(now())
  
  userAchievements UserAchievement[]
  
  @@index([type])
  @@index([rarity])
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        Int
  achievementId String
  unlockedAt    DateTime    @default(now())
  pointsEarned  Int
  
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  
  @@unique([userId, achievementId])
  @@index([userId])
  @@index([achievementId])
}

model UserStats {
  id              Int      @id @default(autoincrement())
  userId          Int      @unique
  currentStreak   Int      @default(0)
  longestStreak   Int      @default(0)
  totalPoints     Int      @default(0)
  lastReadingDate DateTime?
  updatedAt       DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model ReadingChallenge {
  id          Int      @id @default(autoincrement())
  userId      Int
  year        Int
  goal        Int
  completed   Int      @default(0)
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, year])
  @@index([userId])
  @@index([year])
}
