const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

// Contenidos de ejemplo para historias
const sampleStoryContents = [
    "¬°Acabo de terminar este libro incre√≠ble! üìö",
    "Recomiendo mucho esta lectura, me ha cambiado la perspectiva üí≠",
    "¬øAlguien m√°s ha le√≠do esto? Necesito hablar con alguien sobre el final ü§Ø",
    "Leyendo en el parque un domingo perfecto ‚òÄÔ∏è",
    "Este autor nunca me decepciona ‚ú®",
    "¬°Encontr√© esta joya en la librer√≠a de segunda mano! üè™",
    "Releyendo mi libro favorito de la infancia üìñ",
    "Club de lectura esta noche, ¬°qu√© emocionante! üë•",
    "Este libro me est√° dando pesadillas pero no puedo parar de leerlo üò±",
    "¬°Por fin lleg√≥ mi pedido de libros! üì¶",
    "Leyendo en el metro camino al trabajo üöá",
    "Este libro me hizo llorar como un beb√© üò≠",
    "¬°Qu√© final tan inesperado! No me lo ve√≠a venir ü§Ø",
    "Recomendaci√≥n del d√≠a: este libro es oro puro ‚ú®",
    "Leyendo bajo las estrellas esta noche ‚≠ê",
    "Este libro me record√≥ por qu√© amo leer üíï",
    "¬°Encontr√© la edici√≥n especial que buscaba! üéâ",
    "Leyendo con mi gato en el sof√° üê±",
    "Este libro me est√° ense√±ando tanto sobre la vida üìö",
    "¬°Qu√© personaje tan fascinante! Me encanta su desarrollo üë§",
    "No puedo creer que no haya le√≠do esto antes ü§¶‚Äç‚ôÄÔ∏è",
    "Este libro me est√° volviendo loco, no s√© qu√© va a pasar üòµ",
    "Leyendo en la cafeter√≠a con un caf√© perfecto ‚òï",
    "¬°Qu√© prosa tan hermosa! Cada p√°gina es una joya üíé",
    "Este libro me est√° haciendo reflexionar mucho ü§î",
    "¬°Encontr√© mi nueva obsesi√≥n literaria! üî•",
    "Leyendo en la playa, qu√© momento perfecto üèñÔ∏è",
    "Este autor tiene una forma √∫nica de contar historias ‚úçÔ∏è",
    "¬°Qu√© mundo tan fascinante ha creado! üåç",
    "Este libro me est√° ense√±ando historia de una forma incre√≠ble üìú"
];

// Funci√≥n para generar contenido m√°s espec√≠fico basado en el libro
function generateBookSpecificContent(book) {
    const bookSpecificContents = [
        `¬°Acabo de terminar "${book.title}"! üìö`,
        `Recomiendo mucho "${book.title}", me ha cambiado la perspectiva üí≠`,
        `¬øAlguien m√°s ha le√≠do "${book.title}"? Necesito hablar sobre el final ü§Ø`,
        `"${book.title}" me est√° dando pesadillas pero no puedo parar üò±`,
        `"${book.title}" me hizo llorar como un beb√© üò≠`,
        `¬°Qu√© final tan inesperado en "${book.title}"! No me lo ve√≠a venir ü§Ø`,
        `"${book.title}" es oro puro, recomiendo mucho ‚ú®`,
        `"${book.title}" me record√≥ por qu√© amo leer üíï`,
        `¬°Encontr√© "${book.title}" en la librer√≠a de segunda mano! üè™`,
        `"${book.title}" me est√° ense√±ando tanto sobre la vida üìö`,
        `¬°Qu√© personaje tan fascinante en "${book.title}"! üë§`,
        `No puedo creer que no haya le√≠do "${book.title}" antes ü§¶‚Äç‚ôÄÔ∏è`,
        `"${book.title}" me est√° volviendo loco, no s√© qu√© va a pasar üòµ`,
        `¬°Qu√© prosa tan hermosa en "${book.title}"! üíé`,
        `"${book.title}" me est√° haciendo reflexionar mucho ü§î`,
        `¬°Encontr√© mi nueva obsesi√≥n: "${book.title}"! üî•`,
        `"${book.title}" tiene una forma √∫nica de contar historias ‚úçÔ∏è`,
        `¬°Qu√© mundo tan fascinante en "${book.title}"! üåç`
    ];
    
    return bookSpecificContents[Math.floor(Math.random() * bookSpecificContents.length)];
}

// Funci√≥n para obtener libros reales de la base de datos
async function getRealBooks() {
    try {
        // Primero intentar obtener libros de la base de datos
        const dbBooks = await prisma.book.findMany({
            take: 20,
            select: {
                title: true,
                author: true,
                imageUrl: true
            }
        });
        
        // Filtrar libros que tengan t√≠tulo e imagen
        const validBooks = dbBooks.filter(book => book.title && book.imageUrl);

        if (validBooks.length > 0) {
            console.log(`üìö Usando ${validBooks.length} libros de la base de datos`);
            return validBooks.map(book => ({
                title: book.title,
                author: book.author || 'Autor desconocido',
                cover: book.imageUrl // Usar la portada real de la base de datos
            }));
        }

        // Si no hay libros en la DB, usar API de OpenLibrary
        console.log('üìö No hay libros en la DB, obteniendo de OpenLibrary API...');
        const apiBooks = await getBooksFromAPI();
        return apiBooks;
    } catch (error) {
        console.error('Error obteniendo libros:', error);
        // Fallback a libros de ejemplo
        return getFallbackBooks();
    }
}

// Funci√≥n para obtener libros de la API de OpenLibrary
async function getBooksFromAPI() {
    const subjects = ['fiction', 'romance', 'mystery', 'science fiction', 'fantasy', 'thriller'];
    const books = [];
    
    for (const subject of subjects) {
        try {
            const response = await fetch(`https://openlibrary.org/subjects/${subject}.json?limit=5`);
            const data = await response.json();
            
            if (data.works) {
                for (const work of data.works) {
                    if (work.title && work.authors && work.authors.length > 0) {
                        const coverId = work.cover_id;
                        const coverUrl = coverId ? `https://covers.openlibrary.org/b/id/${coverId}-L.jpg` : null;
                        
                        books.push({
                            title: work.title,
                            author: work.authors[0].name,
                            cover: coverUrl
                        });
                    }
                }
            }
        } catch (error) {
            console.error(`Error obteniendo libros de ${subject}:`, error);
        }
    }
    
    return books.slice(0, 15); // M√°ximo 15 libros
}

// Libros de fallback si fallan las APIs
function getFallbackBooks() {
    return [
        { title: "Cien a√±os de soledad", author: "Gabriel Garc√≠a M√°rquez", cover: "https://covers.openlibrary.org/b/id/8739161-L.jpg" },
        { title: "El nombre del viento", author: "Patrick Rothfuss", cover: "https://covers.openlibrary.org/b/id/8739161-L.jpg" },
        { title: "1984", author: "George Orwell", cover: "https://covers.openlibrary.org/b/id/8739161-L.jpg" },
        { title: "Kafka en la orilla", author: "Haruki Murakami", cover: "https://covers.openlibrary.org/b/id/8739161-L.jpg" },
        { title: "El c√≥digo Da Vinci", author: "Dan Brown", cover: "https://covers.openlibrary.org/b/id/8739161-L.jpg" }
    ];
}

// Im√°genes de ejemplo para historias (opcional)
const sampleImages = [
    "https://images.unsplash.com/photo-1481627834876-b7833e8f5570?w=400",
    "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=400",
    "https://images.unsplash.com/photo-1512820790803-83ca734da794?w=400",
    "https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=400",
    "https://images.unsplash.com/photo-1441974231531-c6227db76b6e?w=400",
    "https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=400",
    "https://images.unsplash.com/photo-1441974231531-c6227db76b6e?w=400",
    "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=400"
];

async function initStories() {
    try {
        console.log('üìñ Iniciando seeder de historias...');
        
        // Obtener todos los usuarios
        const users = await prisma.user.findMany({
            select: { id: true, username: true, name: true, avatar: true }
        });
        
        if (users.length === 0) {
            console.log('‚ùå No hay usuarios en la base de datos. Ejecuta primero: node scripts/init-users.js');
            return;
        }
        
        console.log(`üë• Encontrados ${users.length} usuarios`);
        
        // Limpiar historias existentes
        await prisma.story.deleteMany({});
        console.log('üßπ Historias existentes eliminadas');
        
        // Obtener libros reales
        const realBooks = await getRealBooks();
        console.log(`üìö Libros disponibles para historias: ${realBooks.length}`);
        
        // Crear historias de ejemplo
        const storiesToCreate = [];
        const numStories = Math.min(users.length * 3, 50); // M√°ximo 3 historias por usuario, m√°ximo 50 total
        
        for (let i = 0; i < numStories; i++) {
            const randomUser = users[Math.floor(Math.random() * users.length)];
            // Siempre asignar un libro (100% de las historias tienen libro)
            const randomBook = realBooks.length > 0 ? realBooks[Math.floor(Math.random() * realBooks.length)] : null;
            
            // Generar contenido espec√≠fico del libro
            const randomContent = randomBook ? 
                generateBookSpecificContent(randomBook) : 
                sampleStoryContents[Math.floor(Math.random() * sampleStoryContents.length)];
            
            // Crear fecha aleatoria en las √∫ltimas 24 horas
            const createdAt = new Date();
            createdAt.setHours(createdAt.getHours() - Math.random() * 24);
            
            // Las historias expiran en 24 horas desde su creaci√≥n
            const expiresAt = new Date(createdAt);
            expiresAt.setHours(expiresAt.getHours() + 24);
            
            storiesToCreate.push({
                userId: randomUser.id,
                content: randomContent,
                bookTitle: randomBook?.title || null, // T√≠tulo del libro relacionado
                bookCover: randomBook?.cover || null, // Portada del libro (siempre visible)
                createdAt,
                expiresAt
            });
        }
        
        // Crear historias en lotes
        const createdStories = await prisma.story.createMany({
            data: storiesToCreate
        });
        
        console.log('üéâ Seeder de historias completado exitosamente!');
        console.log(`üìä Estad√≠sticas:`);
        console.log(`   - Historias creadas: ${createdStories.count}`);
        console.log(`   - Usuarios participantes: ${new Set(storiesToCreate.map(s => s.userId)).size}`);
        console.log(`   - Historias con libros: ${storiesToCreate.filter(s => s.bookTitle).length}`);
        console.log(`   - Portadas reales: ${storiesToCreate.filter(s => s.bookCover).length}`);
        
        // Mostrar algunas historias de ejemplo
        const sampleStories = await prisma.story.findMany({
            take: 5,
            include: { user: true },
            orderBy: { createdAt: 'desc' }
        });
        
        console.log('\nüìù Ejemplos de historias creadas:');
        sampleStories.forEach((story, index) => {
            const bookInfo = story.bookTitle ? ` | Libro: ${story.bookTitle}` : '';
            const imageInfo = story.imageUrl ? ' | Con imagen' : '';
            console.log(`   ${index + 1}. ${story.user.name || story.user.username}: "${story.content}"${bookInfo}${imageInfo}`);
        });
        
    } catch (error) {
        console.error('‚ùå Error en el seeder de historias:', error);
    } finally {
        await prisma.$disconnect();
    }
}

// Ejecutar si se llama directamente
if (require.main === module) {
    initStories()
        .then(() => {
            console.log('üéâ Seeder de historias completado!');
            process.exit(0);
        })
        .catch((error) => {
            console.error('üí• Error en el seeder de historias:', error);
            process.exit(1);
        });
}

module.exports = { initStories };
