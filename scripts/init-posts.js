const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

// Datos de ejemplo para posts
const samplePosts = [
    {
        text: "Acabo de terminar 'Cien a√±os de soledad' de Gabriel Garc√≠a M√°rquez. ¬°Qu√© obra maestra! La forma en que entrelaza la historia de la familia Buend√≠a con la historia de Macondo es simplemente incre√≠ble. ¬øAlguien m√°s ha le√≠do esta novela?",
        bookTitle: "Cien a√±os de soledad",
        bookAuthor: "Gabriel Garc√≠a M√°rquez",
        bookCover: "https://covers.openlibrary.org/b/id/8739161-L.jpg"
    },
    {
        text: "Recomiendo mucho 'El nombre del viento' de Patrick Rothfuss. La prosa es hermosa y la historia de Kvothe es fascinante. Es perfecto para los amantes de la fantas√≠a √©pica.",
        bookTitle: "El nombre del viento",
        bookAuthor: "Patrick Rothfuss",
        bookCover: "https://covers.openlibrary.org/b/id/8739161-L.jpg"
    },
    {
        text: "Estoy leyendo '1984' de George Orwell y me est√° impactando mucho. La distop√≠a que describe es escalofriante y muy relevante en nuestros tiempos. ¬øQu√© opinan de esta obra?",
        bookTitle: "1984",
        bookAuthor: "George Orwell",
        bookCover: "https://covers.openlibrary.org/b/id/8739161-L.jpg"
    },
    {
        text: "¬°Acabo de descubrir a Haruki Murakami! Estoy leyendo 'Kafka en la orilla' y me encanta su estilo surrealista. Es como un sue√±o l√∫cido en forma de novela.",
        bookTitle: "Kafka en la orilla",
        bookAuthor: "Haruki Murakami",
        bookCover: "https://covers.openlibrary.org/b/id/8739161-L.jpg"
    },
    {
        text: "Para los amantes del misterio, 'El c√≥digo Da Vinci' de Dan Brown es una lectura obligada. La trama es trepidante y llena de giros inesperados.",
        bookTitle: "El c√≥digo Da Vinci",
        bookAuthor: "Dan Brown",
        bookCover: "https://covers.openlibrary.org/b/id/8739161-L.jpg"
    },
    {
        text: "Estoy releyendo 'El se√±or de los anillos' y cada vez me sorprende m√°s la riqueza del mundo que cre√≥ Tolkien. La Tierra Media es un universo completo.",
        bookTitle: "El se√±or de los anillos",
        bookAuthor: "J.R.R. Tolkien",
        bookCover: "https://covers.openlibrary.org/b/id/8739161-L.jpg"
    },
    {
        text: "¬øAlguien ha le√≠do 'Sapiens' de Yuval Noah Harari? Es una perspectiva fascinante sobre la evoluci√≥n de la humanidad. Muy recomendado para entender nuestro pasado.",
        bookTitle: "Sapiens",
        bookAuthor: "Yuval Noah Harari",
        bookCover: "https://covers.openlibrary.org/b/id/8739161-L.jpg"
    },
    {
        text: "Acabo de terminar 'La sombra del viento' de Carlos Ruiz Zaf√≥n. La Barcelona que describe es m√°gica y la historia de Daniel Sempere me ha cautivado completamente.",
        bookTitle: "La sombra del viento",
        bookAuthor: "Carlos Ruiz Zaf√≥n",
        bookCover: "https://covers.openlibrary.org/b/id/8739161-L.jpg"
    },
    {
        text: "Para los que buscan algo diferente, 'El alquimista' de Paulo Coelho es una f√°bula hermosa sobre seguir nuestros sue√±os. Muy inspirador.",
        bookTitle: "El alquimista",
        bookAuthor: "Paulo Coelho",
        bookCover: "https://covers.openlibrary.org/b/id/8739161-L.jpg"
    },
    {
        text: "Estoy leyendo 'Dune' de Frank Herbert y me est√° fascinando el mundo de Arrakis. La pol√≠tica, la ecolog√≠a, la religi√≥n... todo est√° tan bien construido.",
        bookTitle: "Dune",
        bookAuthor: "Frank Herbert",
        bookCover: "https://covers.openlibrary.org/b/id/8739161-L.jpg"
    },
    {
        text: "Acabo de empezar 'El juego de Ender' de Orson Scott Card. La estrategia militar y la psicolog√≠a del protagonista son fascinantes. ¬øAlguien m√°s lo ha le√≠do?",
        bookTitle: "El juego de Ender",
        bookAuthor: "Orson Scott Card",
        bookCover: "https://covers.openlibrary.org/b/id/8739161-L.jpg"
    },
    {
        text: "Recomiendo 'Los pilares de la Tierra' de Ken Follett. La construcci√≥n de una catedral en la Edad Media es el escenario perfecto para una historia √©pica.",
        bookTitle: "Los pilares de la Tierra",
        bookAuthor: "Ken Follett",
        bookCover: "https://covers.openlibrary.org/b/id/8739161-L.jpg"
    },
    {
        text: "Estoy leyendo 'El perfume' de Patrick S√ºskind y me est√° sorprendiendo mucho. La descripci√≥n de los olores es incre√≠blemente v√≠vida.",
        bookTitle: "El perfume",
        bookAuthor: "Patrick S√ºskind",
        bookCover: "https://covers.openlibrary.org/b/id/8739161-L.jpg"
    },
    {
        text: "Para los amantes de la ciencia ficci√≥n, 'Fundaci√≥n' de Isaac Asimov es una lectura obligada. La psicohistoria es un concepto fascinante.",
        bookTitle: "Fundaci√≥n",
        bookAuthor: "Isaac Asimov",
        bookCover: "https://covers.openlibrary.org/b/id/8739161-L.jpg"
    },
    {
        text: "Acabo de terminar 'El guardi√°n entre el centeno' de J.D. Salinger. La voz narrativa de Holden Caulfield es √∫nica y muy aut√©ntica.",
        bookTitle: "El guardi√°n entre el centeno",
        bookAuthor: "J.D. Salinger",
        bookCover: "https://covers.openlibrary.org/b/id/8739161-L.jpg"
    }
];

// Comentarios de ejemplo
const sampleComments = [
    "¬°Totalmente de acuerdo! Es una obra maestra.",
    "Me encanta ese libro, lo he le√≠do varias veces.",
    "Gracias por la recomendaci√≥n, lo voy a buscar.",
    "¬øD√≥nde lo compraste?",
    "Yo tambi√©n lo estoy leyendo ahora mismo.",
    "Excelente elecci√≥n de lectura.",
    "¬øHas le√≠do otros libros del mismo autor?",
    "Me gust√≥ mucho, aunque el final me sorprendi√≥.",
    "Es uno de mis favoritos tambi√©n.",
    "¬øRecomiendas alg√∫n otro libro similar?",
    "¬°Qu√© coincidencia! Acabo de terminarlo tambi√©n.",
    "La pel√≠cula no le hace justicia al libro.",
    "¬øSab√≠as que hay una secuela?",
    "Me encanta c√≥mo describe los personajes.",
    "Es perfecto para una tarde lluviosa.",
    "¬øAlguna vez has conocido al autor?",
    "La traducci√≥n es excelente.",
    "Me record√≥ a otro libro que le√≠...",
    "¬øCu√°nto tiempo te tom√≥ leerlo?",
    "Definitivamente lo voy a releer."
];

async function initPosts() {
    try {
        console.log('üå± Iniciando seeder de posts...');
        
        // Obtener todos los usuarios
        const users = await prisma.user.findMany({
            select: { id: true, username: true, name: true, avatar: true }
        });
        
        if (users.length === 0) {
            console.log('‚ùå No hay usuarios en la base de datos. Ejecuta primero: node scripts/init-users.js');
            return;
        }
        
        console.log(`üìö Encontrados ${users.length} usuarios`);
        
        // Limpiar datos existentes (en orden correcto por las claves for√°neas)
        await prisma.like.deleteMany({});
        await prisma.postComment.deleteMany({});
        await prisma.post.deleteMany({});
        console.log('üßπ Posts, comentarios y likes existentes eliminados');
        
        // Crear posts de ejemplo
        const createdPosts = [];
        for (let i = 0; i < samplePosts.length; i++) {
            const postData = samplePosts[i];
            const randomUser = users[Math.floor(Math.random() * users.length)];
            
            const post = await prisma.post.create({
                data: {
                    userId: randomUser.id,
                    text: postData.text,
                    bookTitle: postData.bookTitle,
                    bookAuthor: postData.bookAuthor,
                    bookCover: postData.bookCover,
                    createdAt: new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000) // √öltimos 7 d√≠as
                }
            });
            
            createdPosts.push(post);
            console.log(`‚úÖ Post creado: "${postData.bookTitle}" por ${randomUser.name || randomUser.username}`);
        }
        
        // Crear comentarios de ejemplo
        console.log('üí¨ Creando comentarios de ejemplo...');
        for (const post of createdPosts) {
            const numComments = Math.floor(Math.random() * 5) + 1; // 1-5 comentarios por post
            
            for (let i = 0; i < numComments; i++) {
                const randomUser = users[Math.floor(Math.random() * users.length)];
                const randomComment = sampleComments[Math.floor(Math.random() * sampleComments.length)];
                
                await prisma.postComment.create({
                    data: {
                        postId: post.id,
                        userId: randomUser.id,
                        text: randomComment,
                        createdAt: new Date(post.createdAt.getTime() + Math.random() * 24 * 60 * 60 * 1000) // Dentro de 24h del post
                    }
                });
            }
        }
        
        // Crear algunos likes de ejemplo
        console.log('‚ù§Ô∏è Creando likes de ejemplo...');
        for (const post of createdPosts) {
            const numLikes = Math.floor(Math.random() * 8) + 1; // 1-8 likes por post
            const likedUsers = new Set();
            
            for (let i = 0; i < numLikes; i++) {
                let randomUser;
                do {
                    randomUser = users[Math.floor(Math.random() * users.length)];
                } while (likedUsers.has(randomUser.id) || randomUser.id === post.userId);
                
                likedUsers.add(randomUser.id);
                
                await prisma.like.create({
                    data: {
                        userId: randomUser.id,
                        postId: post.id,
                        createdAt: new Date(post.createdAt.getTime() + Math.random() * 24 * 60 * 60 * 1000)
                    }
                });
            }
        }
        
        console.log('üéâ Seeder de posts completado exitosamente!');
        console.log(`üìä Estad√≠sticas:`);
        console.log(`   - Posts creados: ${createdPosts.length}`);
        console.log(`   - Comentarios creados: ${await prisma.postComment.count()}`);
        console.log(`   - Likes creados: ${await prisma.like.count()}`);
        
    } catch (error) {
        console.error('‚ùå Error en el seeder de posts:', error);
    } finally {
        await prisma.$disconnect();
    }
}

// Ejecutar si se llama directamente
if (require.main === module) {
    initPosts();
}

module.exports = { initPosts };
